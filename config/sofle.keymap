/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

//TODO: I want to have these RBG FLASH whenever entering a different layer. Waiting on ZMK updates
#define HOME 0
#define NAVI 1
#define CODE 2
#define SYST 3
#define GAME 4
#define NUMP 5

//UNDERGLOW RGB DEFINITION
&spi1 {
  compatible = "nordic,nrf-spim";
  status = "okay";
  mosi-pin = <6>;
  // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
  sck-pin = <5>;
  miso-pin = <7>;

  led_strip: ws2812@0 {
    compatible = "worldsemi,ws2812-spi";
    label = "WS2812";

    /* SPI */
    reg = <0>; /* ignored, but necessary for SPI bindings */
    spi-max-frequency = <4000000>;

    /* WS2812 */
    chain-length = <10>; /* number of LEDs */
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;
  };
};


/ {
  keymap {
    compatible = "zmk,keymap";
    //home layer, used for pretty much all use cases
    default_layer {
      bindings = <
        &kp MINUS  &kp N1   &kp N2    &kp N3    &kp N4    &kp N5                     &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp EQUAL
        &kp TAB    &kp Q    &kp W     &kp E     &kp R     &kp T                      &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
        &kp ESC    &kp A    &kp S     &kp D     &kp F     &kp G                      &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
        &kp LSHFT  &kp Z    &kp X     &kp C     &kp V     &kp B  &kp LC(C) &kp LC(V) &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &kp RSHFT
        &kp LCTRL  &kp LGUI  &kp LALT &lt CODE LBRC &lt NUMP SPACE                   &lt NAVI RET &lt SYST RBRC    &kp LC(S) &kp LC(Z) &tog GAME
      >;

      sensor-bindings = <
        &inc_dec_kp LC(RIGHT) LC(LEFT) 
        &inc_dec_kp UP DOWN
      >;
    };

    //nav layer, mapped on hold of right thumb. When ZMK gets timed presses, and I can add application launching, I'll do that here.
    navigation_layer {
      bindings = <
        &kp F1     &kp F2   &kp F3    &kp F4    &kp F5    &kp F6                     &kp F7    &kp F8    &kp F9    &kp F10       &kp F11   &kp F12
        &kp CAPS   &trans   &trans    &trans    &trans    &trans                     &kp PG_UP &kp LC(F) &kp UP    &kp LC(LS(F)) &kp HOME  &kp DEL
        &kp ESC    &trans   &trans    &trans    &trans    &trans                     &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT     &kp END   &kp SQT
        &kp LSHFT  &trans   &trans    &trans    &trans    &trans &kp LC(F) &kp LC(N) &trans    &trans    &trans    &trans        &kp BSLH  &kp RSHFT
        &kp LCTRL  &kp LGUI  &kp LALT &lt CODE LBRC &lt NUMP SPACE                   &lt NAVI RET &lt SYST RBRC    &kp LC(S)     &kp LC(Z) &tog GAME
      >;

      sensor-bindings = <
        &inc_dec_kp LC(LS(RIGHT)) LC(LS(LEFT)) 
        &inc_dec_kp LS(UP) LS(DOWN)
      >;
    };

    //code layer, mapped on hold of left, left thumb key. commonly needed symbols with reduced finger travel. When ZMK gets macros, they'll go here for coding.
    code_layer {
      bindings = <
        &kp MINUS  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                     &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp EQUAL
        &kp CAPS   &kp SLASH &kp MINUS &kp EQUAL &kp STAR  &kp HASH                   &kp HASH  &kp STAR  &kp EQUAL &kp MINUS &kp SLASH &kp DEL
        &kp ESC    &kp LT    &kp LPAR  &kp LBKT  &kp LBRC  &kp SQT                    &kp SEMI  &kp RBRC  &kp RBKT  &kp RPAR  &kp GT    &kp SQT
        &kp LSHFT  &kp TILDE &kp GRAVE &kp PIPE  &kp AMPS  &kp AT &kp LC(X) &kp LC(V) &kp AT    &kp AMPS  &kp PIPE  &kp GRAVE &kp TILDE &kp RSHFT
        &kp LCTRL  &kp LGUI  &kp LALT &lt CODE LBRC &lt NUMP SPACE                    &lt NAVI RET &lt SYST RBRC    &kp LC(S) &kp LC(Z) &tog GAME
      >;

      sensor-bindings = <
        &inc_dec_kp LC(Z) LC(Y) 
        &inc_dec_kp DEL BSPC
      >;
    };

    //System layer - used to manage the keyboard hardware and media controls of the computer. Playing around with some colors that I like.
    system_layer {
      bindings = <
        &bt BT_CLR                          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2                  &bt BT_SEL 3    &bt BT_SEL 4                        &kp N6  &kp N7      &kp N8        &kp N9       &kp N0       &kp EQUAL
        &rgb_ug RGB_TOG                     &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI               &rgb_ug RGB_SPI &rgb_ug RGB_EFF                     &trans  &trans      &trans        &trans       &trans       &kp DEL
        &rgb_ug RGB_COLOR_HSB(255, 179, 25) &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD               &rgb_ug RGB_SPD &rgb_ug RGB_EFR                     &trans  &kp C_PREV  &kp C_PP      &kp C_NEXT   &trans       &kp SQT
        &kp LSHFT                           &out OUT_USB    &out OUT_BLE    &RGB_COLOR_HSB(102, 230, 255) &bootloader     &reset          &kp C_PP &kp C_NEXT &reset  &bootloader &trans        &out OUT_BLE &out OUT_USB &kp RSHFT
        &kp LCTRL                           &kp LGUI        &kp LALT        &lt CODE LBRC                 &lt NUMP SPACE                                      &lt NAVI RET        &lt SYST RBRC &kp LC(S)    &kp LC(Z)    &tog GAME
      >;

      sensor-bindings = <
        &inc_dec_kp C_VOL_UP C_VOL_DN 
        &inc_dec_kp C_FF C_RW
      >;
    };

    //removes layer toggles to better allow gaming.
    game_layer {
      bindings = <
        &kp MINUS  &kp N1   &kp N2    &kp N3    &kp N4    &kp N5                     &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp EQUAL
        &kp TAB    &kp Q    &kp W     &kp E     &kp R     &kp T                      &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
        &kp ESC    &kp A    &kp S     &kp D     &kp F     &kp G                      &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
        &kp LSHFT  &kp Z    &kp X     &kp C     &kp V     &kp B  &kp LC(C) &kp LC(V) &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &kp RSHFT
        &kp LCTRL  &kp LGUI  &kp LALT &kp LBRC  &kp SPACE                            &lt NAVI RET        &kp RBRC  &kp LC(S) &kp LC(Z) &tog GAME
      >;

      sensor-bindings = <
        &inc_dec_kp LC(RIGHT) LC(LEFT) 
        &inc_dec_kp UP DOWN
      >;
    };

    //Adds a numpad under the right hand while held.
    numpad_layer {
      bindings = <
        &kp MINUS  &kp N1   &kp N2    &kp N3    &kp N4    &kp N5                     &kp KP_LPAR  &kp N7       &kp N8    &kp N9     &kp KP_MULTIPLY &kp KP_RPAR
        &kp CAPS   &trans   &trans    &trans    &trans    &trans                     &kp KP_NUM   &kp N4       &kp N5    &kp N6     &kp KP_MINUS    &kp DEL
        &kp ESC    &trans   &trans    &trans    &trans    &trans                     &kp KP_CLEAR &kp N1       &kp N2    &kp N3     &kp KP_PLUS     &kp SQT
        &kp LSHFT  &trans   &trans    &trans    &trans    &trans &kp LC(C) &kp LC(V) &kp KP_ENTER &kp KP_COMMA &kp N0    &kp KP_DOT &kp KP_DIVIDE   &kp RSHFT
        &kp LCTRL  &kp LGUI  &kp LALT &lt CODE LBRC &lt NUMP SPACE                   &lt NAVI RET &lt SYST RBRC    &kp LC(S) &kp LC(Z) &tog GAME
      >;

      sensor-bindings = <
        &inc_dec_kp LC(LS(RIGHT)) LC(LS(LEFT)) 
        &inc_dec_kp LS(UP) LS(DOWN)
      >;
    };

/ {
  chosen {
    zmk,underglow = &led_strip;
  };
};
